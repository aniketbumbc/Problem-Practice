import { of, Subject, asapScheduler, Observable, throwError } from 'rxjs';
import { audit, buffer, bufferCount, bufferTime, bufferToggle, bufferWhen, catchError, combineAll, combineLatest, concat, count, debounce, debounceTime, defaultIfEmpty, delay, delayWhen, dematerialize, distinct, distinctUntilChanged, elementAt, endWith, every, exhaust, exhaustMap, expand, filter, finalize, find, findIndex, first, groupBy, ignoreElements, isEmpty, last, map, mapTo, materialize, merge, mergeMap, mergeScan, multicast, observeOn, onErrorResumeNext, pairwise, partition, pluck, publishBehavior, publishLast, publishReplay, race, reduce, repeat, repeatWhen, retry, retryWhen, refCount, sample, sampleTime, scan, sequenceEqual, share, shareReplay, single, skip, skipLast, skipUntil, skipWhile, startWith, subscribeOn, switchMap, take, takeLast, takeUntil, takeWhile, tap, throttle, throttleTime, throwIfEmpty, timeInterval, timeoutWith, toArray, windowCount, windowTime, windowToggle, windowWhen, withLatestFrom, zip, zipAll } from 'rxjs/operators';

/*
MIT License

Copyright (c) 2020 Ankit Singh <dabalyan@hotmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

This license applies to the complete mono-repo, unless specified otherwise.
*/

const NUM = 5;
const OF$ = of(1);
const MAPPER = () => OF$;
const NOOP = (...args) => { };
const OPERATORS_BY_CATEGORY = {
    conditional: ['defaultIfEmpty', 'every', 'find', 'findIndex', 'isEmpty', 'throwIfEmpty'],
    errorHandling: ['catchError', 'retry', 'retryWhen', 'onErrorResumeNext'],
    filter: [
        'take',
        'takeLast',
        'takeUntil',
        'takeWhile',
        'audit',
        'debounce',
        'debounceTime',
        'distinct',
        'distinctUntilChanged',
        'elementAt',
        'filter',
        'first',
        'ignoreElements',
        'last',
        'sample',
        'sampleTime',
        'single',
        'skip',
        'skipLast',
        'skipUntil',
        'skipWhile',
        'throttle',
        'throttleTime',
    ],
    join: ['combineAll', 'startWith', 'exhaust', 'withLatestFrom', 'endWith'],
    joinCreation: ['combineLatest', 'concat', 'merge', 'partition', 'race', 'zip', 'zipAll'],
    mathAndAggregate: ['count', 'reduce'],
    multicast: [
        'share',
        'multicast',
        'shareReplay',
        'publishBehavior',
        'publishLast',
        'publishReplay',
    ],
    transformation: [
        'map',
        'mapTo',
        'buffer',
        'bufferCount',
        'bufferTime',
        'bufferToggle',
        'bufferWhen',
        'switchMap',
        'exhaustMap',
        'pairwise',
        'pluck',
        'scan',
        'expand',
        'groupBy',
        'mergeMap',
        'mergeScan',
        'windowCount',
        'windowTime',
        'windowToggle',
        'windowWhen',
    ],
    utility: [
        'delay',
        'delayWhen',
        'finalize',
        'dematerialize',
        'materialize',
        'tap',
        'observeOn',
        'refCount',
        'toArray',
        'repeat',
        'repeatWhen',
        'sequenceEqual',
        'subscribeOn',
        'timeInterval',
        'timeoutWith',
    ],
};
const COLOR_GENERATORS_BY_CATEGORY = {
    conditional: a => `rgba(200,200,200,${a || 1})`,
    errorHandling: a => `rgba(255,0,120,${a || 1})`,
    filter: a => `rgba(255,255,0,${a || 1})`,
    join: a => `rgba(0,125,255,${a || 1})`,
    joinCreation: a => `rgba(255,100,0,${a || 1})`,
    mathAndAggregate: a => `rgba(200,200,200,${a || 1})`,
    multicast: a => `rgba(0,255,217,${a || 1})`,
    transformation: a => `rgba(17,255,0,${a || 1})`,
    utility: a => `rgba(245,0,255,${a || 1})`,
};
const OPERATORS_BY_RETURNED_FN_BODY = {
    [String(audit(MAPPER))]: 'audit',
    // [String(auditTime(NUM))]: 'auditTime', // audit
    [String(buffer(OF$))]: 'buffer',
    [String(bufferCount(NUM))]: 'bufferCount',
    [String(bufferTime(NUM))]: 'bufferTime',
    [String(bufferToggle(OF$, MAPPER))]: 'bufferToggle',
    [String(bufferWhen(MAPPER))]: 'bufferWhen',
    [String(catchError(MAPPER))]: 'catchError',
    [String(combineAll())]: 'combineAll',
    [String(combineLatest([OF$]))]: 'combineLatest',
    [String(concat())]: 'concat',
    // [String(concatAll())]: 'concatAll', // mergeMap
    // [String(concatMap(MAPPER))]: 'concatMap', // mergeMap
    // [String(concatMapTo(MAPPER))]: 'concatMapTo', // mergeMap
    [String(count())]: 'count',
    [String(debounce(MAPPER))]: 'debounce',
    [String(debounceTime(NUM))]: 'debounceTime',
    [String(defaultIfEmpty())]: 'defaultIfEmpty',
    [String(delay(NUM))]: 'delay',
    [String(delayWhen(MAPPER))]: 'delayWhen',
    [String(dematerialize())]: 'dematerialize',
    [String(distinct())]: 'distinct',
    [String(distinctUntilChanged())]: 'distinctUntilChanged',
    // [String(distinctUntilKeyChanged<[]>(NUM))]: 'distinctUntilKeyChanged', // distinctUntilChanged
    [String(elementAt(NUM))]: 'elementAt',
    [String(endWith())]: 'endWith',
    [String(every(NOOP))]: 'every',
    [String(exhaust())]: 'exhaust',
    [String(exhaustMap(MAPPER))]: 'exhaustMap',
    [String(expand(MAPPER))]: 'expand',
    [String(filter(NOOP))]: 'filter',
    [String(finalize(MAPPER))]: 'finalize',
    [String(find(NOOP))]: 'find',
    [String(findIndex(NOOP))]: 'findIndex',
    [String(first())]: 'first',
    [String(groupBy(MAPPER))]: 'groupBy',
    [String(ignoreElements())]: 'ignoreElements',
    [String(isEmpty())]: 'isEmpty',
    [String(last())]: 'last',
    [String(map(MAPPER))]: 'map',
    [String(mapTo(MAPPER))]: 'mapTo',
    [String(materialize())]: 'materialize',
    // [String(max())]: 'max', // reduce
    [String(merge())]: 'merge',
    // [String(mergeAll())]: 'mergeAll', // mergeMap
    [String(mergeMap(MAPPER))]: 'mergeMap',
    // [String(flatMap(MAPPER))]: 'flatMap', // mergeMap
    // [String(mergeMapTo(MAPPER))]: 'mergeMapTo', // mergeMap
    [String(mergeScan(MAPPER, NUM))]: 'mergeScan',
    // [String(min())]: 'min', // reduce
    [String(multicast(new Subject()))]: 'multicast',
    [String(observeOn(asapScheduler))]: 'observeOn',
    [String(onErrorResumeNext())]: 'onErrorResumeNext',
    [String(pairwise())]: 'pairwise',
    [String(partition(NOOP))]: 'partition',
    [String(pluck(''))]: 'pluck',
    // [String(publish())]: 'publish', // multicast
    [String(publishBehavior(MAPPER))]: 'publishBehavior',
    [String(publishLast())]: 'publishLast',
    [String(publishReplay())]: 'publishReplay',
    [String(race())]: 'race',
    [String(reduce(MAPPER))]: 'reduce',
    [String(repeat())]: 'repeat',
    [String(repeatWhen(MAPPER))]: 'repeatWhen',
    [String(retry())]: 'retry',
    [String(retryWhen(MAPPER))]: 'retryWhen',
    [String(refCount())]: 'refCount',
    [String(sample(OF$))]: 'sample',
    [String(sampleTime(NUM))]: 'sampleTime',
    [String(scan(MAPPER))]: 'scan',
    [String(sequenceEqual(OF$))]: 'sequenceEqual',
    [String(share())]: 'share',
    [String(shareReplay())]: 'shareReplay',
    [String(single())]: 'single',
    [String(skip(NUM))]: 'skip',
    [String(skipLast(NUM))]: 'skipLast',
    [String(skipUntil(OF$))]: 'skipUntil',
    [String(skipWhile(NOOP))]: 'skipWhile',
    [String(startWith(MAPPER))]: 'startWith',
    [String(subscribeOn(asapScheduler))]: 'subscribeOn',
    // [String(switchAll())]: 'switchAll', // switchMap
    [String(switchMap(MAPPER))]: 'switchMap',
    // [String(switchMapTo(OF$))]: 'switchMapTo', // switchMap
    [String(take(NUM))]: 'take',
    [String(takeLast(NUM))]: 'takeLast',
    [String(takeUntil(OF$))]: 'takeUntil',
    [String(takeWhile(NOOP))]: 'takeWhile',
    [String(tap(MAPPER))]: 'tap',
    [String(throttle(MAPPER))]: 'throttle',
    [String(throttleTime(NUM))]: 'throttleTime',
    [String(throwIfEmpty(MAPPER))]: 'throwIfEmpty',
    [String(timeInterval(asapScheduler))]: 'timeInterval',
    // [String(timeout(NUM))]: 'timeout', // timeoutWith
    [String(timeoutWith(NUM, OF$))]: 'timeoutWith',
    // [String(timestamp(asapScheduler))]: 'timestamp', // map
    [String(toArray())]: 'toArray',
    [String(windowCount(NUM))]: 'windowCount',
    [String(windowTime(NUM))]: 'windowTime',
    [String(windowToggle(OF$, MAPPER))]: 'windowToggle',
    [String(windowWhen(MAPPER))]: 'windowWhen',
    [String(withLatestFrom())]: 'withLatestFrom',
    [String(zip())]: 'zip',
    [String(zipAll())]: 'zipAll',
};
const COLORS_BY_OPERATOR = {
    source: 'rgb(240,240,240)',
};
Object.entries(OPERATORS_BY_CATEGORY).forEach(([cat, ops]) => {
    const span = 0.3 / ops.length;
    ops.forEach((op, i) => {
        COLORS_BY_OPERATOR[op] = COLOR_GENERATORS_BY_CATEGORY[cat]((1 - span * i).toFixed(2));
        /*console.log(
          `%c ${op} `,
          `background-color: #000; padding: 3px; border-radius: 6px;color: ${colorGenByCat[cat](
            1 - span * i
          )}`
        );*/
    });
});

let lastLogDebuggerId;
let lastLogOperatorExecCountMsg;
const PREFIX = 'âž° ';
class Logger {
    constructor(debuggerId, operators, hideOutputs, noStyling) {
        this.debuggerId = debuggerId;
        this.hideOutputs = hideOutputs;
        this.noStyling = noStyling;
        this.operatorsExecCountMap = {};
        this.longestOperatorExecCountMsgLen = 0;
        this.subCount = 0;
        this.startMsg = debuggerId + ' >> START';
        this.endMsg = debuggerId + ' >> END';
        this.subscriptionMsg = debuggerId + ' >> SUBSCRIBED';
        this.erroredMsg = debuggerId + ' >> ERRORED';
        this.completedMsg = debuggerId + ' >> COMPLETED';
        this.basePad = 7;
        this.pad =
            this.basePad +
                Math.max(this.startMsg.length, this.endMsg.length, this.subscriptionMsg.length, this.completedMsg.length);
        this.operatorNames = ['source'].concat(operators.map(op => OPERATORS_BY_RETURNED_FN_BODY[String(op)] || ''));
        this.longestNameLen = this.operatorNames.reduce((a, b) => (a.length > b.length ? a : b)).length;
    }
    logStart() {
        const msg = this.startMsg.padEnd(this.basePad + this.pad, '_');
        console.log(this.newLines(2) + PREFIX + msg + this.subCountMsg.padStart(4, '_') + '__â–½');
    }
    logResume() {
        if ((lastLogDebuggerId && lastLogDebuggerId !== this.debuggerId) ||
            (lastLogOperatorExecCountMsg &&
                lastLogOperatorExecCountMsg !== this.currentOperatorExecCountMsg)) {
            const msg = this.debuggerId.padEnd(this.basePad + this.pad, '_');
            console.log(this.newLines(2) + PREFIX + msg + this.subCountMsg.padStart(4, '_') + '___');
        }
    }
    logEnd() {
        const msg = this.endMsg.padEnd(this.basePad + this.pad, 'â€¾');
        console.log(PREFIX + msg + this.subCountMsg.padStart(4, 'â€¾') + 'â€¾â€¾â–³' + this.newLines(3));
    }
    logOperator(opIndex, value) {
        const opName = this.operatorNames[opIndex];
        const opIndexStr = String(opIndex).padStart(2, ' ');
        const paddedIndexAndName = (opIndexStr + ' ' + opName).padEnd(this.longestNameLen + 4, ' ');
        const paddedExecCountMsg = `${this.currentOperatorExecCountMsg}`
            .padStart(this.longestOperatorExecCountMsgLen, ' ')
            .padEnd(this.longestOperatorExecCountMsgLen + 1, ' ');
        console.log(PREFIX + (this.noStyling ? '' : '%c') + paddedIndexAndName + paddedExecCountMsg, this.noStyling
            ? ''
            : `color: ${COLORS_BY_OPERATOR[opName]}; background-color: #000; padding: 3px; border-radius: 6px;`, this.hideOutputs === true ? '' : value);
        lastLogDebuggerId = this.debuggerId;
        lastLogOperatorExecCountMsg = this.currentOperatorExecCountMsg;
    }
    prepare(opIndex) {
        var _a;
        const opName = this.operatorNames[opIndex];
        this.operatorsExecCountMap[opIndex + opName] =
            ((_a = this.operatorsExecCountMap[opIndex + opName]) !== null && _a !== void 0 ? _a : 0) + 1;
        this.currentOperatorExecCountMsg =
            this.operatorsExecCountMap[opIndex + opName] > 1
                ? ` (${this.operatorsExecCountMap[opIndex + opName]})`
                : '';
        this.longestOperatorExecCountMsgLen = Math.max(this.longestOperatorExecCountMsgLen, this.currentOperatorExecCountMsg.length);
    }
    addSubscription() {
        this.subCount++;
        this.subCountMsg = this.subCount > 1 ? `S:${this.subCount}` : '';
        const msg = this.subscriptionMsg.padEnd(this.basePad + this.pad, '-');
        console.log(this.newLines(1) + PREFIX + msg + this.subCountMsg.padStart(4, '-') + '--â–¼' + this.newLines(2));
    }
    logErrored() {
        const msg = this.erroredMsg.padEnd(this.basePad + this.pad, '-');
        console.log(this.newLines(1) + PREFIX + msg + this.subCountMsg.padStart(4, '-') + '--â–²' + this.newLines(2));
    }
    logCompleted() {
        const msg = this.completedMsg.padEnd(this.basePad + this.pad, '-');
        console.log(this.newLines(1) + PREFIX + msg + this.subCountMsg.padStart(4, '-') + '--â–²' + this.newLines(2));
    }
    newLines(n) {
        return this.noStyling ? '' : Array(n).fill('\n').join('');
    }
}

let debuggersCount = 0;
/**
 * RxJS-Debug wrapper function, to enable automated logging for Observables and Streams.
 *
 * When an Observable is wrapped with this function,
 * it returns the same Observable after injecting the logging hooks into it.
 *
 * It overrides the `subscribe` and `pipe` methods and
 * replaces them with the custom trapped versions to achieve the expected monitoring and logging behavior.
 *
 * @example
 * ```ts
 * // raw Observable
 * const source$ = of(1, 2, 3)
 *
 * // wrapped Observable with automatic logging enabled
 * const sourceWithAutomaticLogging$ = $D(source$)
 *
 * // subscribe to start the logging
 * sourceWithAutomaticLogging$.subscribe()
 *
 * // you'll see the logging in the console
 *
 * // the target use-case would be when there are multiple operators applied
 * $D(source$).pipe(
 *   map(x => x + 5),
 *   switchMap(x => of(x * 2)),
 * )
 *
 * // you'll see even more detailed and useful logging in the console
 * ```
 *
 * @param $ The Observable that needs to be debugged.
 * @param options Configuration options for RxJS-Debug instance.
 * @returns A copy of the passed Observable, with logging enabled.
 */
function $D($, options) {
    var _a;
    const d$ = new Observable();
    d$.source = $;
    $ = d$;
    options = options || {};
    const debuggerId = String((_a = options.id) !== null && _a !== void 0 ? _a : ++debuggersCount);
    const ogSubscribe = $.subscribe;
    const ogPipe = $.pipe;
    let logger;
    $.pipe = function (...operators) {
        logger = new Logger(debuggerId, operators, options.hideOutputs, options.noStyling);
        const injections = logger.operatorNames.length;
        for (let i = 0; i < injections; i++) {
            const tapper = tap(value => {
                logger.prepare(i);
                if (i === 0) {
                    logger.logStart();
                }
                else {
                    logger.logResume();
                }
                logger.logOperator(i, value);
                if (i === injections - 1) {
                    logger.logEnd();
                }
            });
            operators.splice(i + i, 0, tapper);
        }
        if (typeof options.addDelay === 'number') {
            const delayer = delay(options.addDelay);
            const totalInjections = operators.length;
            for (let i = 0; i < totalInjections; i++) {
                operators.splice(i + i, 0, delayer);
            }
        }
        operators.push(catchError(err => {
            logger.logErrored();
            return throwError(err);
        }));
        operators.push(tap({ complete: () => logger.logCompleted() }));
        return ogPipe.apply(this, operators);
    };
    $.subscribe = function (...args) {
        if (!logger) {
            const tappedObservable = $.pipe();
            return tappedObservable.subscribe(...args);
        }
        logger.addSubscription();
        return ogSubscribe.apply(this, args);
    };
    return $;
}

/*
 * Public API Surface of rxjs-debug
 */

/**
 * Generated bundle index. Do not edit.
 */

export { $D };
//# sourceMappingURL=rxjs-debug.js.map
