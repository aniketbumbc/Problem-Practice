import { Observable } from 'rxjs';
import { DebuggerOptions } from './models';
/**
 * RxJS-Debug wrapper function, to enable automated logging for Observables and Streams.
 *
 * When an Observable is wrapped with this function,
 * it returns the same Observable after injecting the logging hooks into it.
 *
 * It overrides the `subscribe` and `pipe` methods and
 * replaces them with the custom trapped versions to achieve the expected monitoring and logging behavior.
 *
 * @example
 * ```ts
 * // raw Observable
 * const source$ = of(1, 2, 3)
 *
 * // wrapped Observable with automatic logging enabled
 * const sourceWithAutomaticLogging$ = $D(source$)
 *
 * // subscribe to start the logging
 * sourceWithAutomaticLogging$.subscribe()
 *
 * // you'll see the logging in the console
 *
 * // the target use-case would be when there are multiple operators applied
 * $D(source$).pipe(
 *   map(x => x + 5),
 *   switchMap(x => of(x * 2)),
 * )
 *
 * // you'll see even more detailed and useful logging in the console
 * ```
 *
 * @param $ The Observable that needs to be debugged.
 * @param options Configuration options for RxJS-Debug instance.
 * @returns A copy of the passed Observable, with logging enabled.
 */
export declare function $D<T>($: Observable<T>, options?: DebuggerOptions): Observable<T>;
