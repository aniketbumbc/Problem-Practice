import { Observable, throwError } from 'rxjs';
import { catchError, delay, tap } from 'rxjs/operators';
import { Logger } from './logger';
let debuggersCount = 0;
/**
 * RxJS-Debug wrapper function, to enable automated logging for Observables and Streams.
 *
 * When an Observable is wrapped with this function,
 * it returns the same Observable after injecting the logging hooks into it.
 *
 * It overrides the `subscribe` and `pipe` methods and
 * replaces them with the custom trapped versions to achieve the expected monitoring and logging behavior.
 *
 * @example
 * ```ts
 * // raw Observable
 * const source$ = of(1, 2, 3)
 *
 * // wrapped Observable with automatic logging enabled
 * const sourceWithAutomaticLogging$ = $D(source$)
 *
 * // subscribe to start the logging
 * sourceWithAutomaticLogging$.subscribe()
 *
 * // you'll see the logging in the console
 *
 * // the target use-case would be when there are multiple operators applied
 * $D(source$).pipe(
 *   map(x => x + 5),
 *   switchMap(x => of(x * 2)),
 * )
 *
 * // you'll see even more detailed and useful logging in the console
 * ```
 *
 * @param $ The Observable that needs to be debugged.
 * @param options Configuration options for RxJS-Debug instance.
 * @returns A copy of the passed Observable, with logging enabled.
 */
export function $D($, options) {
    var _a;
    const d$ = new Observable();
    d$.source = $;
    $ = d$;
    options = options || {};
    const debuggerId = String((_a = options.id) !== null && _a !== void 0 ? _a : ++debuggersCount);
    const ogSubscribe = $.subscribe;
    const ogPipe = $.pipe;
    let logger;
    $.pipe = function (...operators) {
        logger = new Logger(debuggerId, operators, options.hideOutputs, options.noStyling);
        const injections = logger.operatorNames.length;
        for (let i = 0; i < injections; i++) {
            const tapper = tap(value => {
                logger.prepare(i);
                if (i === 0) {
                    logger.logStart();
                }
                else {
                    logger.logResume();
                }
                logger.logOperator(i, value);
                if (i === injections - 1) {
                    logger.logEnd();
                }
            });
            operators.splice(i + i, 0, tapper);
        }
        if (typeof options.addDelay === 'number') {
            const delayer = delay(options.addDelay);
            const totalInjections = operators.length;
            for (let i = 0; i < totalInjections; i++) {
                operators.splice(i + i, 0, delayer);
            }
        }
        operators.push(catchError(err => {
            logger.logErrored();
            return throwError(err);
        }));
        operators.push(tap({ complete: () => logger.logCompleted() }));
        return ogPipe.apply(this, operators);
    };
    $.subscribe = function (...args) {
        if (!logger) {
            const tappedObservable = $.pipe();
            return tappedObservable.subscribe(...args);
        }
        logger.addSubscription();
        return ogSubscribe.apply(this, args);
    };
    return $;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWdnZXIuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4vcGFja2FnZXMvcnhqcy1kZWJ1Zy9zcmMvIiwic291cmNlcyI6WyJsaWIvZGVidWdnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFVBQVUsRUFBZ0IsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQzFELE9BQU8sRUFBQyxVQUFVLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3RELE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFHaEMsSUFBSSxjQUFjLEdBQUcsQ0FBQyxDQUFDO0FBRXZCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBa0NHO0FBQ0gsTUFBTSxVQUFVLEVBQUUsQ0FBSSxDQUFnQixFQUFFLE9BQXlCOztJQUMvRCxNQUFNLEVBQUUsR0FBRyxJQUFJLFVBQVUsRUFBSyxDQUFDO0lBQy9CLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUVQLE9BQU8sR0FBRyxPQUFPLElBQUksRUFBRSxDQUFDO0lBQ3hCLE1BQU0sVUFBVSxHQUFXLE1BQU0sT0FBQyxPQUFPLENBQUMsRUFBRSxtQ0FBSSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBRWxFLE1BQU0sV0FBVyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDaEMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUN0QixJQUFJLE1BQWMsQ0FBQztJQUVuQixDQUFDLENBQUMsSUFBSSxHQUFHLFVBQVUsR0FBRyxTQUFjO1FBQ2xDLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ25GLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDO1FBRS9DLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDbkMsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUN6QixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUVsQixJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQ1gsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO2lCQUNuQjtxQkFBTTtvQkFDTCxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7aUJBQ3BCO2dCQUVELE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUU3QixJQUFJLENBQUMsS0FBSyxVQUFVLEdBQUcsQ0FBQyxFQUFFO29CQUN4QixNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7aUJBQ2pCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7WUFFSCxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ3BDO1FBQ0QsSUFBSSxPQUFPLE9BQU8sQ0FBQyxRQUFRLEtBQUssUUFBUSxFQUFFO1lBQ3hDLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDeEMsTUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQztZQUN6QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsZUFBZSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN4QyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2FBQ3JDO1NBQ0Y7UUFDRCxTQUFTLENBQUMsSUFBSSxDQUNaLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNmLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNwQixPQUFPLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FDSCxDQUFDO1FBQ0YsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTdELE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDdkMsQ0FBQyxDQUFDO0lBRUYsQ0FBQyxDQUFDLFNBQVMsR0FBRyxVQUFVLEdBQUcsSUFBSTtRQUM3QixJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDbEMsT0FBTyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztTQUM1QztRQUVELE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN6QixPQUFPLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3ZDLENBQUMsQ0FBQztJQUVGLE9BQU8sQ0FBQyxDQUFDO0FBQ1gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7T2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uLCB0aHJvd0Vycm9yfSBmcm9tICdyeGpzJztcbmltcG9ydCB7Y2F0Y2hFcnJvciwgZGVsYXksIHRhcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtMb2dnZXJ9IGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7RGVidWdnZXJPcHRpb25zfSBmcm9tICcuL21vZGVscyc7XG5cbmxldCBkZWJ1Z2dlcnNDb3VudCA9IDA7XG5cbi8qKlxuICogUnhKUy1EZWJ1ZyB3cmFwcGVyIGZ1bmN0aW9uLCB0byBlbmFibGUgYXV0b21hdGVkIGxvZ2dpbmcgZm9yIE9ic2VydmFibGVzIGFuZCBTdHJlYW1zLlxuICpcbiAqIFdoZW4gYW4gT2JzZXJ2YWJsZSBpcyB3cmFwcGVkIHdpdGggdGhpcyBmdW5jdGlvbixcbiAqIGl0IHJldHVybnMgdGhlIHNhbWUgT2JzZXJ2YWJsZSBhZnRlciBpbmplY3RpbmcgdGhlIGxvZ2dpbmcgaG9va3MgaW50byBpdC5cbiAqXG4gKiBJdCBvdmVycmlkZXMgdGhlIGBzdWJzY3JpYmVgIGFuZCBgcGlwZWAgbWV0aG9kcyBhbmRcbiAqIHJlcGxhY2VzIHRoZW0gd2l0aCB0aGUgY3VzdG9tIHRyYXBwZWQgdmVyc2lvbnMgdG8gYWNoaWV2ZSB0aGUgZXhwZWN0ZWQgbW9uaXRvcmluZyBhbmQgbG9nZ2luZyBiZWhhdmlvci5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIC8vIHJhdyBPYnNlcnZhYmxlXG4gKiBjb25zdCBzb3VyY2UkID0gb2YoMSwgMiwgMylcbiAqXG4gKiAvLyB3cmFwcGVkIE9ic2VydmFibGUgd2l0aCBhdXRvbWF0aWMgbG9nZ2luZyBlbmFibGVkXG4gKiBjb25zdCBzb3VyY2VXaXRoQXV0b21hdGljTG9nZ2luZyQgPSAkRChzb3VyY2UkKVxuICpcbiAqIC8vIHN1YnNjcmliZSB0byBzdGFydCB0aGUgbG9nZ2luZ1xuICogc291cmNlV2l0aEF1dG9tYXRpY0xvZ2dpbmckLnN1YnNjcmliZSgpXG4gKlxuICogLy8geW91J2xsIHNlZSB0aGUgbG9nZ2luZyBpbiB0aGUgY29uc29sZVxuICpcbiAqIC8vIHRoZSB0YXJnZXQgdXNlLWNhc2Ugd291bGQgYmUgd2hlbiB0aGVyZSBhcmUgbXVsdGlwbGUgb3BlcmF0b3JzIGFwcGxpZWRcbiAqICREKHNvdXJjZSQpLnBpcGUoXG4gKiAgIG1hcCh4ID0+IHggKyA1KSxcbiAqICAgc3dpdGNoTWFwKHggPT4gb2YoeCAqIDIpKSxcbiAqIClcbiAqXG4gKiAvLyB5b3UnbGwgc2VlIGV2ZW4gbW9yZSBkZXRhaWxlZCBhbmQgdXNlZnVsIGxvZ2dpbmcgaW4gdGhlIGNvbnNvbGVcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSAkIFRoZSBPYnNlcnZhYmxlIHRoYXQgbmVlZHMgdG8gYmUgZGVidWdnZWQuXG4gKiBAcGFyYW0gb3B0aW9ucyBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIFJ4SlMtRGVidWcgaW5zdGFuY2UuXG4gKiBAcmV0dXJucyBBIGNvcHkgb2YgdGhlIHBhc3NlZCBPYnNlcnZhYmxlLCB3aXRoIGxvZ2dpbmcgZW5hYmxlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uICREPFQ+KCQ6IE9ic2VydmFibGU8VD4sIG9wdGlvbnM/OiBEZWJ1Z2dlck9wdGlvbnMpOiBPYnNlcnZhYmxlPFQ+IHtcbiAgY29uc3QgZCQgPSBuZXcgT2JzZXJ2YWJsZTxUPigpO1xuICBkJC5zb3VyY2UgPSAkO1xuICAkID0gZCQ7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGNvbnN0IGRlYnVnZ2VySWQ6IHN0cmluZyA9IFN0cmluZyhvcHRpb25zLmlkID8/ICsrZGVidWdnZXJzQ291bnQpO1xuXG4gIGNvbnN0IG9nU3Vic2NyaWJlID0gJC5zdWJzY3JpYmU7XG4gIGNvbnN0IG9nUGlwZSA9ICQucGlwZTtcbiAgbGV0IGxvZ2dlcjogTG9nZ2VyO1xuXG4gICQucGlwZSA9IGZ1bmN0aW9uICguLi5vcGVyYXRvcnM6IGFueSk6IE9ic2VydmFibGU8VD4ge1xuICAgIGxvZ2dlciA9IG5ldyBMb2dnZXIoZGVidWdnZXJJZCwgb3BlcmF0b3JzLCBvcHRpb25zLmhpZGVPdXRwdXRzLCBvcHRpb25zLm5vU3R5bGluZyk7XG4gICAgY29uc3QgaW5qZWN0aW9ucyA9IGxvZ2dlci5vcGVyYXRvck5hbWVzLmxlbmd0aDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5qZWN0aW9uczsgaSsrKSB7XG4gICAgICBjb25zdCB0YXBwZXIgPSB0YXAodmFsdWUgPT4ge1xuICAgICAgICBsb2dnZXIucHJlcGFyZShpKTtcblxuICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgIGxvZ2dlci5sb2dTdGFydCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvZ2dlci5sb2dSZXN1bWUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvZ2dlci5sb2dPcGVyYXRvcihpLCB2YWx1ZSk7XG5cbiAgICAgICAgaWYgKGkgPT09IGluamVjdGlvbnMgLSAxKSB7XG4gICAgICAgICAgbG9nZ2VyLmxvZ0VuZCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgb3BlcmF0b3JzLnNwbGljZShpICsgaSwgMCwgdGFwcGVyKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmFkZERlbGF5ID09PSAnbnVtYmVyJykge1xuICAgICAgY29uc3QgZGVsYXllciA9IGRlbGF5KG9wdGlvbnMuYWRkRGVsYXkpO1xuICAgICAgY29uc3QgdG90YWxJbmplY3Rpb25zID0gb3BlcmF0b3JzLmxlbmd0aDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG90YWxJbmplY3Rpb25zOyBpKyspIHtcbiAgICAgICAgb3BlcmF0b3JzLnNwbGljZShpICsgaSwgMCwgZGVsYXllcik7XG4gICAgICB9XG4gICAgfVxuICAgIG9wZXJhdG9ycy5wdXNoKFxuICAgICAgY2F0Y2hFcnJvcihlcnIgPT4ge1xuICAgICAgICBsb2dnZXIubG9nRXJyb3JlZCgpO1xuICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihlcnIpO1xuICAgICAgfSlcbiAgICApO1xuICAgIG9wZXJhdG9ycy5wdXNoKHRhcCh7Y29tcGxldGU6ICgpID0+IGxvZ2dlci5sb2dDb21wbGV0ZWQoKX0pKTtcblxuICAgIHJldHVybiBvZ1BpcGUuYXBwbHkodGhpcywgb3BlcmF0b3JzKTtcbiAgfTtcblxuICAkLnN1YnNjcmliZSA9IGZ1bmN0aW9uICguLi5hcmdzKTogU3Vic2NyaXB0aW9uIHtcbiAgICBpZiAoIWxvZ2dlcikge1xuICAgICAgY29uc3QgdGFwcGVkT2JzZXJ2YWJsZSA9ICQucGlwZSgpO1xuICAgICAgcmV0dXJuIHRhcHBlZE9ic2VydmFibGUuc3Vic2NyaWJlKC4uLmFyZ3MpO1xuICAgIH1cblxuICAgIGxvZ2dlci5hZGRTdWJzY3JpcHRpb24oKTtcbiAgICByZXR1cm4gb2dTdWJzY3JpYmUuYXBwbHkodGhpcywgYXJncyk7XG4gIH07XG5cbiAgcmV0dXJuICQ7XG59XG4iXX0=