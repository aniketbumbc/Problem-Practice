import { COLORS_BY_OPERATOR, OPERATORS_BY_RETURNED_FN_BODY } from './meta';
let lastLogDebuggerId;
let lastLogOperatorExecCountMsg;
const PREFIX = '➰ ';
export class Logger {
    constructor(debuggerId, operators, hideOutputs, noStyling) {
        this.debuggerId = debuggerId;
        this.hideOutputs = hideOutputs;
        this.noStyling = noStyling;
        this.operatorsExecCountMap = {};
        this.longestOperatorExecCountMsgLen = 0;
        this.subCount = 0;
        this.startMsg = debuggerId + ' >> START';
        this.endMsg = debuggerId + ' >> END';
        this.subscriptionMsg = debuggerId + ' >> SUBSCRIBED';
        this.erroredMsg = debuggerId + ' >> ERRORED';
        this.completedMsg = debuggerId + ' >> COMPLETED';
        this.basePad = 7;
        this.pad =
            this.basePad +
                Math.max(this.startMsg.length, this.endMsg.length, this.subscriptionMsg.length, this.completedMsg.length);
        this.operatorNames = ['source'].concat(operators.map(op => OPERATORS_BY_RETURNED_FN_BODY[String(op)] || ''));
        this.longestNameLen = this.operatorNames.reduce((a, b) => (a.length > b.length ? a : b)).length;
    }
    logStart() {
        const msg = this.startMsg.padEnd(this.basePad + this.pad, '_');
        console.log(this.newLines(2) + PREFIX + msg + this.subCountMsg.padStart(4, '_') + '__▽');
    }
    logResume() {
        if ((lastLogDebuggerId && lastLogDebuggerId !== this.debuggerId) ||
            (lastLogOperatorExecCountMsg &&
                lastLogOperatorExecCountMsg !== this.currentOperatorExecCountMsg)) {
            const msg = this.debuggerId.padEnd(this.basePad + this.pad, '_');
            console.log(this.newLines(2) + PREFIX + msg + this.subCountMsg.padStart(4, '_') + '___');
        }
    }
    logEnd() {
        const msg = this.endMsg.padEnd(this.basePad + this.pad, '‾');
        console.log(PREFIX + msg + this.subCountMsg.padStart(4, '‾') + '‾‾△' + this.newLines(3));
    }
    logOperator(opIndex, value) {
        const opName = this.operatorNames[opIndex];
        const opIndexStr = String(opIndex).padStart(2, ' ');
        const paddedIndexAndName = (opIndexStr + ' ' + opName).padEnd(this.longestNameLen + 4, ' ');
        const paddedExecCountMsg = `${this.currentOperatorExecCountMsg}`
            .padStart(this.longestOperatorExecCountMsgLen, ' ')
            .padEnd(this.longestOperatorExecCountMsgLen + 1, ' ');
        console.log(PREFIX + (this.noStyling ? '' : '%c') + paddedIndexAndName + paddedExecCountMsg, this.noStyling
            ? ''
            : `color: ${COLORS_BY_OPERATOR[opName]}; background-color: #000; padding: 3px; border-radius: 6px;`, this.hideOutputs === true ? '' : value);
        lastLogDebuggerId = this.debuggerId;
        lastLogOperatorExecCountMsg = this.currentOperatorExecCountMsg;
    }
    prepare(opIndex) {
        var _a;
        const opName = this.operatorNames[opIndex];
        this.operatorsExecCountMap[opIndex + opName] =
            ((_a = this.operatorsExecCountMap[opIndex + opName]) !== null && _a !== void 0 ? _a : 0) + 1;
        this.currentOperatorExecCountMsg =
            this.operatorsExecCountMap[opIndex + opName] > 1
                ? ` (${this.operatorsExecCountMap[opIndex + opName]})`
                : '';
        this.longestOperatorExecCountMsgLen = Math.max(this.longestOperatorExecCountMsgLen, this.currentOperatorExecCountMsg.length);
    }
    addSubscription() {
        this.subCount++;
        this.subCountMsg = this.subCount > 1 ? `S:${this.subCount}` : '';
        const msg = this.subscriptionMsg.padEnd(this.basePad + this.pad, '-');
        console.log(this.newLines(1) + PREFIX + msg + this.subCountMsg.padStart(4, '-') + '--▼' + this.newLines(2));
    }
    logErrored() {
        const msg = this.erroredMsg.padEnd(this.basePad + this.pad, '-');
        console.log(this.newLines(1) + PREFIX + msg + this.subCountMsg.padStart(4, '-') + '--▲' + this.newLines(2));
    }
    logCompleted() {
        const msg = this.completedMsg.padEnd(this.basePad + this.pad, '-');
        console.log(this.newLines(1) + PREFIX + msg + this.subCountMsg.padStart(4, '-') + '--▲' + this.newLines(2));
    }
    newLines(n) {
        return this.noStyling ? '' : Array(n).fill('\n').join('');
    }
}
//# sourceMappingURL=data:application/json;base64,