{"id":"Practice Concept/function generator and iterator/index.js","dependencies":[{"name":"/Users/aniketbhavsar/Desktop/Interview prep/Demo code/package.json","includedInParent":true,"mtime":1621818767633},{"name":"regenerator-runtime/runtime","loc":{"line":1,"column":7},"parent":"/Users/aniketbhavsar/Desktop/Interview prep/Demo code/Practice Concept/function generator and iterator/index.js","resolved":"/Users/aniketbhavsar/Desktop/Interview prep/Demo code/node_modules/regenerator-runtime/runtime.js"}],"generated":{"js":"\"use strict\";\n\nrequire(\"regenerator-runtime/runtime\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar _marked = /*#__PURE__*/regeneratorRuntime.mark(createSquaredNumber);\n\nconsole.log('Function Generator'); // function* generatorDemo() {\n//   console.log('Generator Call');\n//   yield 'Maggie';\n//   yield 8;\n//   yield 10;\n//   yield 23;\n// }\n// const genrator1 = new generatorDemo(); // return object\n// console.log(genrator1.next());\n// console.log(genrator1.next());\n// console.log(genrator1.next());\n// console.log(genrator1.next());\n// for (let obj of generatorDemo()) {\n//   console.log(obj);\n// }\n\nfunction createSquaredNumber(max) {\n  var n;\n  return regeneratorRuntime.wrap(function createSquaredNumber$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          n = 0;\n\n        case 1:\n          if (!(n < max)) {\n            _context.next = 7;\n            break;\n          }\n\n          n++;\n          _context.next = 5;\n          return n * n;\n\n        case 5:\n          _context.next = 1;\n          break;\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nvar square = createSquaredNumber(10);\n\nvar _iterator = _createForOfIteratorHelper(square),\n    _step;\n\ntry {\n  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n    var obj = _step.value;\n    console.log(obj);\n  }\n} catch (err) {\n  _iterator.e(err);\n} finally {\n  _iterator.f();\n}"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":3,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":1,"column":0}},{"name":"createSquaredNumber","generated":{"line":11,"column":51},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":10}},{"name":"console","generated":{"line":13,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":3,"column":0}},{"generated":{"line":13,"column":7},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":3,"column":7}},{"name":"log","generated":{"line":13,"column":8},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":3,"column":8}},{"generated":{"line":13,"column":11},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":3,"column":0}},{"generated":{"line":13,"column":12},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":3,"column":12}},{"generated":{"line":13,"column":32},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":3,"column":0}},{"generated":{"line":13,"column":35},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":5,"column":0}},{"generated":{"line":14,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":6,"column":0}},{"generated":{"line":15,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":7,"column":0}},{"generated":{"line":16,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":8,"column":0}},{"generated":{"line":17,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":9,"column":0}},{"generated":{"line":18,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":10,"column":0}},{"generated":{"line":19,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":11,"column":0}},{"generated":{"line":20,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":13,"column":0}},{"generated":{"line":21,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":15,"column":0}},{"generated":{"line":22,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":16,"column":0}},{"generated":{"line":23,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":17,"column":0}},{"generated":{"line":24,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":18,"column":0}},{"generated":{"line":25,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":20,"column":0}},{"generated":{"line":26,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":21,"column":0}},{"generated":{"line":27,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":22,"column":0}},{"generated":{"line":29,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"name":"createSquaredNumber","generated":{"line":29,"column":9},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":10}},{"generated":{"line":29,"column":28},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"name":"max","generated":{"line":29,"column":29},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":30}},{"generated":{"line":29,"column":32},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"generated":{"line":30,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"generated":{"line":31,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"generated":{"line":32,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"generated":{"line":33,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"generated":{"line":34,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"name":"n","generated":{"line":35,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":25,"column":6}},{"name":"n","generated":{"line":35,"column":10},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":25,"column":6}},{"generated":{"line":35,"column":11},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"generated":{"line":35,"column":14},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":25,"column":10}},{"generated":{"line":35,"column":15},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"generated":{"line":37,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"generated":{"line":38,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"name":"n","generated":{"line":38,"column":16},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":27,"column":9}},{"generated":{"line":38,"column":17},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":27,"column":10}},{"name":"max","generated":{"line":38,"column":20},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":27,"column":13}},{"generated":{"line":38,"column":23},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"generated":{"line":39,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"generated":{"line":40,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"generated":{"line":41,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"name":"n","generated":{"line":43,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":28,"column":4}},{"name":"n","generated":{"line":43,"column":10},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":28,"column":4}},{"generated":{"line":43,"column":11},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":28,"column":5}},{"generated":{"line":44,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"generated":{"line":45,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":29,"column":4}},{"name":"n","generated":{"line":45,"column":17},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":29,"column":10}},{"generated":{"line":45,"column":18},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":29,"column":11}},{"name":"n","generated":{"line":45,"column":21},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":29,"column":14}},{"generated":{"line":45,"column":22},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":29,"column":4}},{"generated":{"line":47,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"generated":{"line":48,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"generated":{"line":49,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"generated":{"line":51,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"generated":{"line":52,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"generated":{"line":53,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"generated":{"line":54,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"generated":{"line":55,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"generated":{"line":56,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"generated":{"line":57,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":24,"column":0}},{"generated":{"line":59,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":33,"column":0}},{"name":"square","generated":{"line":59,"column":4},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":33,"column":6}},{"generated":{"line":59,"column":10},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":33,"column":12}},{"name":"createSquaredNumber","generated":{"line":59,"column":13},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":33,"column":15}},{"generated":{"line":59,"column":32},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":33,"column":34}},{"generated":{"line":59,"column":33},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":33,"column":35}},{"generated":{"line":59,"column":35},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":33,"column":34}},{"generated":{"line":59,"column":36},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":33,"column":0}},{"name":"square","generated":{"line":61,"column":43},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":35,"column":16}},{"generated":{"line":65,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":35,"column":0}},{"generated":{"line":65,"column":54},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":35,"column":24}},{"generated":{"line":66,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":35,"column":24}},{"name":"obj","generated":{"line":66,"column":8},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":35,"column":9}},{"generated":{"line":66,"column":11},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":35,"column":24}},{"name":"console","generated":{"line":67,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":36,"column":2}},{"name":"console","generated":{"line":67,"column":4},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":36,"column":2}},{"generated":{"line":67,"column":11},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":36,"column":9}},{"name":"log","generated":{"line":67,"column":12},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":36,"column":10}},{"generated":{"line":67,"column":15},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":36,"column":2}},{"name":"obj","generated":{"line":67,"column":16},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":36,"column":14}},{"generated":{"line":67,"column":19},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":36,"column":2}},{"generated":{"line":68,"column":0},"source":"Practice Concept/function generator and iterator/index.js","original":{"line":37,"column":1}}],"sources":{"Practice Concept/function generator and iterator/index.js":"import 'regenerator-runtime/runtime';\n\nconsole.log('Function Generator');\n\n// function* generatorDemo() {\n//   console.log('Generator Call');\n//   yield 'Maggie';\n//   yield 8;\n//   yield 10;\n//   yield 23;\n// }\n\n// const genrator1 = new generatorDemo(); // return object\n\n// console.log(genrator1.next());\n// console.log(genrator1.next());\n// console.log(genrator1.next());\n// console.log(genrator1.next());\n\n// for (let obj of generatorDemo()) {\n//   console.log(obj);\n// }\n\nfunction* createSquaredNumber(max) {\n  let n = 0;\n\n  while (n < max) {\n    n++;\n    yield n * n;\n  }\n}\n\nconst square = createSquaredNumber(10);\n\nfor (let obj of square) {\n  console.log(obj);\n}\n"},"lineCount":null}},"error":null,"hash":"09f97ecf1ca76a2001c709c5e2363123","cacheData":{"env":{}}}