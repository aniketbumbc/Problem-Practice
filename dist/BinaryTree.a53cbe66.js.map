{"version":3,"sources":["IC Practice/BinaryTree.js"],"names":["Node","value","left","right","BTS","root","newNode","currentNode","found","s1","console","log","insert","find"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;IAEMA,OACJ,cAAYC,KAAZ,EAAmB;AAAA;;AACjB,OAAKA,KAAL,GAAaA,KAAb;AACA,OAAKC,IAAL,GAAY,IAAZ;AACA,OAAKC,KAAL,GAAa,IAAb;AACD;;IAGGC;AACJ,iBAAc;AAAA;;AACZ,SAAKC,IAAL,GAAY,IAAZ;AACD;;;;WAED,gBAAOJ,KAAP,EAAc;AACZ,UAAIK,OAAO,GAAG,IAAIN,IAAJ,CAASC,KAAT,CAAd;;AAEA,UAAI,KAAKI,IAAL,KAAc,IAAlB,EAAwB;AACtB,aAAKA,IAAL,GAAYC,OAAZ;AACA,eAAO,IAAP;AACD;;AAED,UAAIC,WAAW,GAAG,KAAKF,IAAvB;;AACA,aAAO,IAAP,EAAa;AACX,YAAIJ,KAAK,KAAKM,WAAW,CAACN,KAA1B,EAAiC;AAC/B,iBAAO,IAAP;AACD;;AACD,YAAIA,KAAK,GAAGM,WAAW,CAACN,KAAxB,EAA+B;AAC7B,cAAIM,WAAW,CAACL,IAAZ,KAAqB,IAAzB,EAA+B;AAC7BK,YAAAA,WAAW,CAACL,IAAZ,GAAmBI,OAAnB;AACA,mBAAO,IAAP;AACD,WAHD,MAGO;AACLC,YAAAA,WAAW,GAAGA,WAAW,CAACL,IAA1B;AACD;AACF;;AAED,YAAID,KAAK,GAAGM,WAAW,CAACN,KAAxB,EAA+B;AAC7B,cAAIM,WAAW,CAACJ,KAAZ,KAAsB,IAA1B,EAAgC;AAC9BI,YAAAA,WAAW,CAACJ,KAAZ,GAAoBG,OAApB;AACA,mBAAO,IAAP;AACD,WAHD,MAGO;AACLC,YAAAA,WAAW,GAAGA,WAAW,CAACJ,KAA1B;AACD;AACF;AACF;AACF;;;WAED,cAAKF,KAAL,EAAY;AACV,UAAI,KAAKI,IAAL,KAAc,IAAlB,EAAwB;AACtB,eAAO,KAAP;AACD;;AACD,UAAIE,WAAW,GAAG,KAAKF,IAAvB;AACA,UAAIG,KAAK,GAAG,KAAZ;;AAEA,aAAO,CAACA,KAAD,IAAUD,WAAjB,EAA8B;AAC5B,YAAIN,KAAK,GAAGM,WAAW,CAACN,KAAxB,EAA+B;AAC7BM,UAAAA,WAAW,GAAGA,WAAW,CAACL,IAA1B;AACD,SAFD,MAEO,IAAID,KAAK,GAAGM,WAAW,CAACN,KAAxB,EAA+B;AACpCM,UAAAA,WAAW,GAAGA,WAAW,CAACJ,KAA1B;AACD,SAFM,MAEA;AACLK,UAAAA,KAAK,GAAG,IAAR;AACD;AACF;;AAED,aAAOD,WAAP;AACD;;;;;;AAGH,IAAIE,EAAE,GAAG,IAAIL,GAAJ,EAAT;AACAM,OAAO,CAACC,GAAR,CAAYF,EAAE,CAACG,MAAH,CAAU,GAAV,CAAZ;AACAF,OAAO,CAACC,GAAR,CAAYF,EAAE,CAACG,MAAH,CAAU,EAAV,CAAZ;AACAF,OAAO,CAACC,GAAR,CAAYF,EAAE,CAACG,MAAH,CAAU,GAAV,CAAZ;AACAF,OAAO,CAACC,GAAR,CAAYF,EAAE,CAACG,MAAH,CAAU,CAAV,CAAZ;AACAF,OAAO,CAACC,GAAR,CAAYF,EAAE,CAACI,IAAH,CAAQ,EAAR,CAAZ","file":"BinaryTree.a53cbe66.js","sourceRoot":"..","sourcesContent":["// class Node {\n//   constructor(value) {\n//     this.value = value;\n//     this.left = null;\n//     this.right = null;\n//   }\n// }\n\n// class BST {\n//   constructor() {\n//     this.root = null;\n//   }\n\n//   insert(value) {\n//     let newNode = new Node(value);\n\n//     if (this.root === null) {\n//       this.root = newNode;\n//       return this;\n//     }\n//     let currentNode = this.root;\n//     while (true) {\n//       if (value === currentNode.value) {\n//         return null;\n//       }\n\n//       if (value < currentNode.value) {\n//         if (currentNode.left === null) {\n//           currentNode.left = newNode;\n//           return this;\n//         } else {\n//           currentNode = currentNode.left;\n//         }\n//       }\n\n//       if (value > currentNode.value) {\n//         if (currentNode.right === null) {\n//           currentNode.right = newNode;\n//           return this;\n//         } else {\n//           currentNode = currentNode.right;\n//         }\n//       }\n//     }\n//   }\n\n//   // find value\n\n//   find(value) {\n//     if (this.root === null) {\n//       return false;\n//     }\n//     let currentNode = this.root;\n//     let found = false;\n//     while (!found && currentNode) {\n//       if (value < currentNode.value) {\n//         currentNode = currentNode.left;\n//       } else if (value > currentNode.value) {\n//         currentNode = currentNode.right;\n//       } else {\n//         found = true;\n//       }\n//     }\n//     return currentNode;\n//   }\n// }\n\n// let s1 = new BST();\n// console.log(s1.insert(100));\n// console.log(s1.insert(50));\n// console.log(s1.find(50));\n\nclass Node {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nclass BTS {\n  constructor() {\n    this.root = null;\n  }\n\n  insert(value) {\n    let newNode = new Node(value);\n\n    if (this.root === null) {\n      this.root = newNode;\n      return this;\n    }\n\n    let currentNode = this.root;\n    while (true) {\n      if (value === currentNode.value) {\n        return null;\n      }\n      if (value < currentNode.value) {\n        if (currentNode.left === null) {\n          currentNode.left = newNode;\n          return this;\n        } else {\n          currentNode = currentNode.left;\n        }\n      }\n\n      if (value > currentNode.value) {\n        if (currentNode.right === null) {\n          currentNode.right = newNode;\n          return this;\n        } else {\n          currentNode = currentNode.right;\n        }\n      }\n    }\n  }\n\n  find(value) {\n    if (this.root === null) {\n      return false;\n    }\n    let currentNode = this.root;\n    let found = false;\n\n    while (!found && currentNode) {\n      if (value < currentNode.value) {\n        currentNode = currentNode.left;\n      } else if (value > currentNode.value) {\n        currentNode = currentNode.right;\n      } else {\n        found = true;\n      }\n    }\n\n    return currentNode;\n  }\n}\n\nlet s1 = new BTS();\nconsole.log(s1.insert(100));\nconsole.log(s1.insert(50));\nconsole.log(s1.insert(192));\nconsole.log(s1.insert(3));\nconsole.log(s1.find(33));\n"]}