{"version":3,"sources":["Code/DS/Practice Pattern/index 26.6.js"],"names":["longestSequ","str","max","current_string","char","position","truncateStr","i","length","charAt","indexOf","substr","console","log","uniqueStr","uniqueString"],"mappings":"AAAA;AAEA,SAASA,WAAT,CAAqBC,GAArB,EAA0B;AACxB,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,cAAc,GAAG,EAArB;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,QAAQ,GAAG,CAAf;AACA,MAAIC,WAAW,GAAG,EAAlB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,GAAG,CAACO,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnCH,IAAAA,IAAI,GAAGH,GAAG,CAACQ,MAAJ,CAAWF,CAAX,CAAP,CADmC,CACb;;AACtBF,IAAAA,QAAQ,GAAGF,cAAc,CAACO,OAAf,CAAuBN,IAAvB,CAAX,CAFmC,CAEM;;AACzC,QAAIC,QAAQ,KAAK,CAAC,CAAlB,EAAqB;AACnBC,MAAAA,WAAW,GAAGH,cAAd;AACAA,MAAAA,cAAc,GAAGA,cAAc,CAACQ,MAAf,CAAsBN,QAAQ,GAAG,CAAjC,CAAjB,CAFmB,CAEmC;AACvD;;AACDF,IAAAA,cAAc,IAAIC,IAAlB;;AAEA,QAAIF,GAAG,GAAGC,cAAc,CAACK,MAAzB,EAAiC;AAC/BN,MAAAA,GAAG,GAAGC,cAAc,CAACK,MAArB;AACD;AACF;;AACD,MAAI,CAACF,WAAW,CAACE,MAAjB,EAAyB;AACvBF,IAAAA,WAAW,GAAGH,cAAd;AACD;;AACDS,EAAAA,OAAO,CAACC,GAAR,CAAYX,GAAZ,EAAiBI,WAAjB;AACD;;AAED,SAASQ,SAAT,CAAmBb,GAAnB,EAAwB;AACtB,MAAII,QAAQ,GAAG,CAAf;AACA,MAAIU,YAAY,GAAG,EAAnB;AACA,MAAIX,IAAI,GAAG,EAAX;AACA,MAAID,cAAc,GAAG,EAArB;;AAEA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,GAAG,CAACO,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnCH,IAAAA,IAAI,GAAGH,GAAG,CAACQ,MAAJ,CAAWF,CAAX,CAAP;AACAF,IAAAA,QAAQ,GAAGF,cAAc,CAACO,OAAf,CAAuBN,IAAvB,CAAX;;AAEA,QAAIC,QAAQ,KAAK,CAAC,CAAlB,EAAqB;AACnBU,MAAAA,YAAY,GAAGZ,cAAf;AACAA,MAAAA,cAAc,GAAGA,cAAc,CAACQ,MAAf,CAAsBN,QAAQ,GAAG,CAAjC,CAAjB;AACD;;AACDF,IAAAA,cAAc,IAAIC,IAAlB;AACD;;AAED,MAAI,CAACW,YAAY,CAACP,MAAlB,EAA0B;AACxBO,IAAAA,YAAY,GAAGZ,cAAf;AACD;;AAEDS,EAAAA,OAAO,CAACC,GAAR,CAAYE,YAAZ,EAA0BA,YAAY,CAACP,MAAvC;AACD;;AAEDM,SAAS,CAAC,aAAD,CAAT;AACAd,WAAW,CAAC,aAAD,CAAX","file":"index 26.6.9fcbbeaa.js","sourceRoot":"..","sourcesContent":["/** Longest sequence of unique character */\n\nfunction longestSequ(str) {\n  let max = 0;\n  let current_string = '';\n  let char = '';\n  let position = 0;\n  let truncateStr = '';\n\n  for (let i = 0; i < str.length; i++) {\n    char = str.charAt(i); // getting each charater\n    position = current_string.indexOf(char); // getting charater postion first time all position -1\n    if (position !== -1) {\n      truncateStr = current_string;\n      current_string = current_string.substr(position + 1); // clear current string when repeat charater found\n    }\n    current_string += char;\n\n    if (max < current_string.length) {\n      max = current_string.length;\n    }\n  }\n  if (!truncateStr.length) {\n    truncateStr = current_string;\n  }\n  console.log(max, truncateStr);\n}\n\nfunction uniqueStr(str) {\n  let position = 0;\n  let uniqueString = '';\n  let char = '';\n  let current_string = '';\n\n  for (let i = 0; i < str.length; i++) {\n    char = str.charAt(i);\n    position = current_string.indexOf(char);\n\n    if (position !== -1) {\n      uniqueString = current_string;\n      current_string = current_string.substr(position + 1);\n    }\n    current_string += char;\n  }\n\n  if (!uniqueString.length) {\n    uniqueString = current_string;\n  }\n\n  console.log(uniqueString, uniqueString.length);\n}\n\nuniqueStr('hello there');\nlongestSequ('hello there');\n"]}